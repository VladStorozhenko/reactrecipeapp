{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","url","portions","ingredients","className","src","alt","map","ingredient","key","weight","indexOf","Math","random","text","href","target","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","searchStart","setSearchStart","page","pageError","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","recipe","label","ceil","yield","onClick","window","scrollTo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAqBeA,EAnBA,SAAC,GAA0D,IAAzDC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,IAAKC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YACpD,OACI,yBAAKC,UAAU,UACX,yBAAKC,IAAKL,EAAOM,IAAKR,EAAOM,UAAU,iBACvC,yBAAKA,UAAU,eACX,wBAAIA,UAAU,gBAAgBN,GAC9B,uBAAGM,UAAU,mBAAb,aAA0CL,GAC1C,wBAAIK,UAAU,eACV,8CAAoBF,EAApB,cACCC,EAAYI,KAAI,SAAAC,GAAU,OACvB,wBAAIJ,UAAU,aAAaK,IAAG,UAAKD,EAAWE,OAASP,EAAYQ,QAAQH,GAA8B,EAAhBI,KAAKC,WAAiBL,EAAWM,UAGlI,uBAAGC,KAAMd,EAAKe,OAAO,SAASZ,UAAU,eAAxC,yBC+EDa,G,MA1FH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAMYF,mBAAS,SANrB,mBAMTG,EANS,KAMDC,EANC,OAQUJ,mBAAS,SARnB,mBAQTK,EARS,KAQFC,EARE,OAUsBN,mBAAS,GAV/B,mBAUTO,EAVS,KAUIC,EAVJ,KAcZC,EAAQF,EAFA,GAEuB,EAE/BG,EAAY,GAGhBC,qBAAU,WACRC,MACC,CAACP,EAAOE,IAEX,IAAMK,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACST,EADT,mBAvBf,WAuBe,oBAtBd,mCAsBc,iBAC2DE,EAD3D,eAC6EA,EAb/F,KAWO,cACXQ,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBf,EAAWe,EAAKC,MALC,2CAAH,qDA8BhB,OACE,yBAAKhC,UAAU,OACb,0BAAMiC,SArBQ,SAACC,GACjBA,EAAEC,iBACFb,EAAe,GACfF,EAASH,IAkBoBjB,UAAU,eACnC,2BACEoC,KAAK,OACLpC,UAAU,aACVqC,MAAOpB,EACPqB,SA7Ba,SAACJ,GACpBhB,EAAUgB,EAAEtB,OAAOyB,UA8Bf,4BAAQD,KAAK,SAASpC,UAAU,iBAAhC,WAIKe,EAAQZ,KAAI,SAAAoC,GAAM,OAEvB,kBAAC,EAAD,CACElC,IAAG,UAAKkC,EAAOA,OAAOC,OAAnB,OAA2BD,EAAOA,OAAO5C,UAE5CD,MAAO6C,EAAOA,OAAOC,MACrB7C,SAAUa,KAAKiC,KAAKF,EAAOA,OAAO5C,UAClCC,MAAO2C,EAAOA,OAAO3C,MACrBC,IAAK0C,EAAOA,OAAO1C,IACnBC,SAAUyC,EAAOA,OAAOG,MACxB3C,YAAawC,EAAOA,OAAOxC,iBAI/B,yBAAKC,UAAU,eACb,4BAAQA,UAAU,cAAc2C,QAtCrB,WACI,GAAftB,GACFC,EAAeD,EAjCP,IAkCRuB,OAAOC,SAAS,EAAG,IAEnBrB,EAAY,uCAiCV,iBACA,4BAAQxB,UAAU,cAAc2C,QA3CrB,WACfrB,EAAeD,EA5BL,IA6BVuB,OAAOC,SAAS,EAAG,KAyCf,cAEF,uBAAG7C,UAAU,QAAb,SAA2BuB,GAC3B,uBAAGvB,UAAU,cAAcwB,MC7EbsB,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bb1a275f.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Recipe = ({title, calories, image, url, portions, ingredients}) => {\r\n    return (\r\n        <div className='recipe'>\r\n            <img src={image} alt={title} className='recipe-image'/>\r\n            <div className=\"recipe-info\">\r\n                <h1 className='recipe-title'>{title}</h1>\r\n                <p className='recipe-calories'>Calories: {calories}</p>\r\n                <ul className='ingredients'>\r\n                    <p>Ingredients for {portions} portions:</p>\r\n                    {ingredients.map(ingredient => (\r\n                        <li className='ingredient' key={`${ingredient.weight + ingredients.indexOf(ingredient) + Math.random() * 5}`}>{ingredient.text}</li>\r\n                    ))} \r\n                </ul>\r\n                <a href={url} target=\"_blank\" className='recipe-link'>Full recipe &#10138;</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const APP_ID = \"823ce4e1\";\n  const APP_KEY = \"919ef3d5f98926115b0f932c3e3b4331\";\n\n  const [recipes, setRecipes] = useState([]);\n\n  const [search, setSearch] = useState(\"apple\");\n\n  const [query, setQuery] = useState(\"apple\");\n\n  const [searchStart, setSearchStart] = useState(0);\n\n  let chunk = 10;\n\n  let page = (searchStart / chunk) + 1;\n\n  let pageError = '';\n  \n\n  useEffect(() => {\n    getRecipes();\n  }, [query, searchStart]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}&from=${searchStart}&to=${searchStart + chunk}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setSearchStart(0);\n    setQuery(search);\n  };\n  const nextPage = () => {\n    setSearchStart(searchStart + chunk);\n    window.scrollTo(0, 0);\n  }\n  const prevPage = () => {\n    if (searchStart != 0) {\n      setSearchStart(searchStart - chunk)\n      window.scrollTo(0, 0);\n    } else {\n      pageError = 'You are already on the first page!';\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          value={search}\n          onChange={updateSearch}\n        />\n        <button type=\"submit\" className=\"search-button\">\n          Search\n        </button>\n      </form>\n      {      recipes.map(recipe => (\n        \n        <Recipe\n          key={`${recipe.recipe.label}${recipe.recipe.calories}`}\n\n          title={recipe.recipe.label}\n          calories={Math.ceil(recipe.recipe.calories)}\n          image={recipe.recipe.image}\n          url={recipe.recipe.url}\n          portions={recipe.recipe.yield}\n          ingredients={recipe.recipe.ingredients} \n\n        />\n      ))}\n      <div className=\"nav-buttons\">\n        <button className='button-more' onClick={prevPage}>Previous page</button>\n        <button className='button-more' onClick={nextPage}>Next page</button>\n      </div>\n      <p className='page'>Page: {page}</p>\n      <p className='page-error'>{pageError}</p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}